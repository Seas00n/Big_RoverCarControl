// Generated by gencpp from file ecm_bridge/driverState.msg
// DO NOT EDIT!


#ifndef ECM_BRIDGE_MESSAGE_DRIVERSTATE_H
#define ECM_BRIDGE_MESSAGE_DRIVERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ecm_bridge
{
template <class ContainerAllocator>
struct driverState_
{
  typedef driverState_<ContainerAllocator> Type;

  driverState_()
    : sw()
    , error()
    , opMode()
    , complement()
    , q()
    , qd()
    , cur()
    , dc_v()  {
    }
  driverState_(const ContainerAllocator& _alloc)
    : sw(_alloc)
    , error(_alloc)
    , opMode(_alloc)
    , complement(_alloc)
    , q(_alloc)
    , qd(_alloc)
    , cur(_alloc)
    , dc_v(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _sw_type;
  _sw_type sw;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _error_type;
  _error_type error;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _opMode_type;
  _opMode_type opMode;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _complement_type;
  _complement_type complement;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_type;
  _q_type q;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _qd_type;
  _qd_type qd;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _cur_type;
  _cur_type cur;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dc_v_type;
  _dc_v_type dc_v;





  typedef boost::shared_ptr< ::ecm_bridge::driverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ecm_bridge::driverState_<ContainerAllocator> const> ConstPtr;

}; // struct driverState_

typedef ::ecm_bridge::driverState_<std::allocator<void> > driverState;

typedef boost::shared_ptr< ::ecm_bridge::driverState > driverStatePtr;
typedef boost::shared_ptr< ::ecm_bridge::driverState const> driverStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ecm_bridge::driverState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ecm_bridge::driverState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ecm_bridge::driverState_<ContainerAllocator1> & lhs, const ::ecm_bridge::driverState_<ContainerAllocator2> & rhs)
{
  return lhs.sw == rhs.sw &&
    lhs.error == rhs.error &&
    lhs.opMode == rhs.opMode &&
    lhs.complement == rhs.complement &&
    lhs.q == rhs.q &&
    lhs.qd == rhs.qd &&
    lhs.cur == rhs.cur &&
    lhs.dc_v == rhs.dc_v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ecm_bridge::driverState_<ContainerAllocator1> & lhs, const ::ecm_bridge::driverState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ecm_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ecm_bridge::driverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecm_bridge::driverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecm_bridge::driverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecm_bridge::driverState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecm_bridge::driverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecm_bridge::driverState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ecm_bridge::driverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2deea21f9bf25c298b3269d351909d41";
  }

  static const char* value(const ::ecm_bridge::driverState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2deea21f9bf25c29ULL;
  static const uint64_t static_value2 = 0x8b3269d351909d41ULL;
};

template<class ContainerAllocator>
struct DataType< ::ecm_bridge::driverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecm_bridge/driverState";
  }

  static const char* value(const ::ecm_bridge::driverState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ecm_bridge::driverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[] sw\n"
"uint16[] error\n"
"uint8[] opMode\n"
"uint8[] complement\n"
"float64[] q\n"
"float64[] qd\n"
"float64[] cur\n"
"float64[] dc_v\n"
;
  }

  static const char* value(const ::ecm_bridge::driverState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ecm_bridge::driverState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sw);
      stream.next(m.error);
      stream.next(m.opMode);
      stream.next(m.complement);
      stream.next(m.q);
      stream.next(m.qd);
      stream.next(m.cur);
      stream.next(m.dc_v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct driverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ecm_bridge::driverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ecm_bridge::driverState_<ContainerAllocator>& v)
  {
    s << indent << "sw[]" << std::endl;
    for (size_t i = 0; i < v.sw.size(); ++i)
    {
      s << indent << "  sw[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.sw[i]);
    }
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.error[i]);
    }
    s << indent << "opMode[]" << std::endl;
    for (size_t i = 0; i < v.opMode.size(); ++i)
    {
      s << indent << "  opMode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.opMode[i]);
    }
    s << indent << "complement[]" << std::endl;
    for (size_t i = 0; i < v.complement.size(); ++i)
    {
      s << indent << "  complement[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.complement[i]);
    }
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "qd[]" << std::endl;
    for (size_t i = 0; i < v.qd.size(); ++i)
    {
      s << indent << "  qd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd[i]);
    }
    s << indent << "cur[]" << std::endl;
    for (size_t i = 0; i < v.cur.size(); ++i)
    {
      s << indent << "  cur[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur[i]);
    }
    s << indent << "dc_v[]" << std::endl;
    for (size_t i = 0; i < v.dc_v.size(); ++i)
    {
      s << indent << "  dc_v[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dc_v[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECM_BRIDGE_MESSAGE_DRIVERSTATE_H
