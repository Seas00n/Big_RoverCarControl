// Generated by gencpp from file car_control/rover.msg
// DO NOT EDIT!


#ifndef CAR_CONTROL_MESSAGE_ROVER_H
#define CAR_CONTROL_MESSAGE_ROVER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_control
{
template <class ContainerAllocator>
struct rover_
{
  typedef rover_<ContainerAllocator> Type;

  rover_()
    : rover_px(0.0)
    , rover_py(0.0)
    , rover_vx(0.0)
    , rover_vy(0.0)
    , rover_w(0.0)
    , rover_state(0)  {
    }
  rover_(const ContainerAllocator& _alloc)
    : rover_px(0.0)
    , rover_py(0.0)
    , rover_vx(0.0)
    , rover_vy(0.0)
    , rover_w(0.0)
    , rover_state(0)  {
  (void)_alloc;
    }



   typedef double _rover_px_type;
  _rover_px_type rover_px;

   typedef double _rover_py_type;
  _rover_py_type rover_py;

   typedef double _rover_vx_type;
  _rover_vx_type rover_vx;

   typedef double _rover_vy_type;
  _rover_vy_type rover_vy;

   typedef double _rover_w_type;
  _rover_w_type rover_w;

   typedef int32_t _rover_state_type;
  _rover_state_type rover_state;





  typedef boost::shared_ptr< ::car_control::rover_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_control::rover_<ContainerAllocator> const> ConstPtr;

}; // struct rover_

typedef ::car_control::rover_<std::allocator<void> > rover;

typedef boost::shared_ptr< ::car_control::rover > roverPtr;
typedef boost::shared_ptr< ::car_control::rover const> roverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_control::rover_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_control::rover_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_control::rover_<ContainerAllocator1> & lhs, const ::car_control::rover_<ContainerAllocator2> & rhs)
{
  return lhs.rover_px == rhs.rover_px &&
    lhs.rover_py == rhs.rover_py &&
    lhs.rover_vx == rhs.rover_vx &&
    lhs.rover_vy == rhs.rover_vy &&
    lhs.rover_w == rhs.rover_w &&
    lhs.rover_state == rhs.rover_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_control::rover_<ContainerAllocator1> & lhs, const ::car_control::rover_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_control::rover_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_control::rover_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_control::rover_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_control::rover_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_control::rover_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_control::rover_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_control::rover_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8939377560b48465bde83d9b3af7dfb7";
  }

  static const char* value(const ::car_control::rover_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8939377560b48465ULL;
  static const uint64_t static_value2 = 0xbde83d9b3af7dfb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_control::rover_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_control/rover";
  }

  static const char* value(const ::car_control::rover_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_control::rover_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 rover_px\n"
"float64 rover_py\n"
"float64 rover_vx\n"
"float64 rover_vy\n"
"float64 rover_w\n"
"int32 rover_state\n"
;
  }

  static const char* value(const ::car_control::rover_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_control::rover_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rover_px);
      stream.next(m.rover_py);
      stream.next(m.rover_vx);
      stream.next(m.rover_vy);
      stream.next(m.rover_w);
      stream.next(m.rover_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rover_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_control::rover_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_control::rover_<ContainerAllocator>& v)
  {
    s << indent << "rover_px: ";
    Printer<double>::stream(s, indent + "  ", v.rover_px);
    s << indent << "rover_py: ";
    Printer<double>::stream(s, indent + "  ", v.rover_py);
    s << indent << "rover_vx: ";
    Printer<double>::stream(s, indent + "  ", v.rover_vx);
    s << indent << "rover_vy: ";
    Printer<double>::stream(s, indent + "  ", v.rover_vy);
    s << indent << "rover_w: ";
    Printer<double>::stream(s, indent + "  ", v.rover_w);
    s << indent << "rover_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rover_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_CONTROL_MESSAGE_ROVER_H
